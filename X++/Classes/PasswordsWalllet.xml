<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PasswordsWalllet</Name>
	<SourceCode>
		<Declaration><![CDATA[
using PasswordsWalletCryptography;

/// <summary>
/// Class for performing the passwords wallet operations
/// </summary>
class PasswordsWalllet
{
    private PasswordWalletUser walletUser;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isSignedIn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the current user is signed in
    /// </summary>
    /// <returns>
    /// TRUE, if the user is signed in; FALSE, otherwise
    /// </returns>
    public boolean isSignedIn()
    {
        return walletUser && walletUser.IsSignedIn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSignIn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the user can be signed in
    /// </summary>
    /// <param name = "_login">User login</param>
    /// <param name = "_password">User password</param>
    /// <returns>
    /// TRUE, if the user can be signed in; FALSE, otherwise
    /// </returns>
    public static boolean checkSignIn(
        WalletUserLogin _login, 
        Password        _password)
    {
        boolean             ret = true;
        PasswordsWalllet    wallet;
        PasswordWalletUser  walletUser;

        walletUser = PasswordWalletUser::find(_login, true);
        wallet     = PasswordsWalllet::construct();

        wallet.parmWalletUser(walletUser);

        if (!walletUser)
        {
            ret = checkFailed(strFmt("User with login %1 does not exists", _login));
        }

        if (ret &&
            !wallet.verifyUserPassword(_password))
        {
            ret = checkFailed("Wrong password");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSignUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the user with current login can be signed up
    /// </summary>
    /// <param name = "_login">User login</param>
    /// <returns>
    /// TRUE, if the user can be signed in; FALSE, otherwise
    /// </returns>
    public static boolean checkSignUp(
        WalletUserLogin _login)
    {
        boolean ret = true;

        if (PasswordWalletUser::exist(_login))
        {
            ret = checkFailed(strFmt("User with login %1 already exists", _login));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the user registration 
    /// </summary>
    /// <param name = "_login">User login</param>
    /// <param name = "_password">User password</param>
    /// <param name = "_passwordType">Password type</param>
    /// <param name = "_signIn">
    /// TRUE, if the user should be signed in after registration; FALSE, otherwise
    /// </param>
    /// <returns>
    /// The <c>PasswordWalletUser</c> record
    /// </returns>
    public PasswordWalletUser signUp(
        ClientLoginUserName _login,
        Password            _password,
        PasswordType        _passwordType,
        boolean             _signIn = false)
    {
        Sha512Hash          passwordHash;
        CryptoPasswordSalt  salt;

        salt         = CryptoServiceProvider::generateSalt();
        passwordHash = this.getPasswordHash(_password, _passwordType, salt);

        walletUser =
            PasswordWalletUser::create(
                _login,
                passwordHash,
                salt,
                _passwordType);

        if (_signIn)
        {
            this.signIn(_login, _password);
        }

        return walletUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signIn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the authentication of the user
    /// </summary>
    /// <param name = "_login">User login</param>
    /// <param name = "_password">User password</param>
    /// <returns>
    /// TRUE, if the authentication was successfull; FALSE, otherwise
    /// </returns>
    public boolean signIn(ClientLoginUserName _login, Password _password)
    { 
        walletUser = PasswordWalletUser::find(_login, true);

        if (walletUser && 
            this.verifyUserPassword(_password))
        {
            ttsbegin;

            walletUser.selectForUpdate(true);

            walletUser.IsSignedIn = true;

            walletUser.update();

            ttscommit;
        }

        return walletUser.IsSignedIn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changePassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the user password
    /// </summary>
    /// <param name = "_login">User login</param>
    /// <param name = "_passwordOld">Old password</param>
    /// <param name = "_passwordNew">New password</param>
    /// <param name = "_passwordNewType">The type of new password</param>
    /// <returns>
    /// The <c>PasswordWalletUser</c> record
    /// </returns>
    public PasswordWalletUser changePassword(
        ClientLoginUserName _login, 
        Password            _passwordOld, 
        Password            _passwordNew, 
        PasswordType        _passwordNewType)
    {
        Sha512Hash          passwordHash;
        CryptoPasswordSalt  salt;
        
        walletUser = PasswordWalletUser::find(_login, true);

        if (walletUser &&
            this.verifyUserPassword(_passwordOld))
        {
            salt         = CryptoServiceProvider::generateSalt();
            passwordHash = this.getPasswordHash(_passwordNew, _passwordNewType, salt);

            ttsbegin;

            walletUser.selectForUpdate(true);

            walletUser.PasswordHash = passwordHash;
            walletUser.Salt         = salt;
            walletUser.PasswordType = _passwordNewType;

            walletUser.update();

            ttscommit;
        }

        return walletUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signOut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Signs out the user
    /// </summary>
    /// <returns>
    /// TRUE, if the user is signed in; FALSE, otherwise
    /// </returns>
    public boolean signOut()
    {
        if (walletUser)
        {
            ttsbegin;

            walletUser.selectForUpdate(true);

            walletUser.IsSignedIn = false;

            walletUser.update();

            ttscommit;
        }

        return walletUser.IsSignedIn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyUserPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies the user password
    /// </summary>
    /// <param name = "_password">
    /// User password
    /// </param>
    /// <returns>
    /// TRUE, if the verification was successful; FALSE, otherwise
    /// </returns>
    private boolean verifyUserPassword(Password _password)
    {
        boolean ret;

        ret = this.verifyPassword(
                _password,
                walletUser.PasswordHash,
                walletUser.PasswordType,
                walletUser.Salt);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies the password
    /// </summary>
    /// <param name = "_password">User password</param>
    /// <param name = "_passwordHash">Password hash</param>
    /// <param name = "_passwordType">Password type</param>
    /// <param name = "_salt">Salt string</param>
    /// <returns>
    /// TRUE, if the verification was successful; FALSE, otherwise
    /// </returns>
    private boolean verifyPassword(Password _password, Sha512Hash _passwordHash, PasswordType _passwordType, CryptoPasswordSalt _salt)
    {
        Sha512Hash passwordHash;

        passwordHash = this.getPasswordHash(_password, _passwordType, _salt);

        return passwordHash == _passwordHash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPasswordHash</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the password hash
    /// </summary>
    /// <param name = "_password">Password</param>
    /// <param name = "_passwordType">Password hash</param>
    /// <param name = "_salt">Salt string</param>
    /// <returns>
    /// The password hash
    /// </returns>
    public Sha512Hash getPasswordHash(Password _password, PasswordType _passwordType, CryptoPasswordSalt _salt)
    {
        PasswordManager manager;
        Sha512Hash      passwordHash;
        
        manager = new PasswordManager();

        switch (_passwordType)
        {
            case PasswordType::SHA512:
                passwordHash = manager.GetPasswordHashSHA512(_password, _salt);
                break;

            case PasswordType::HMAC:
                passwordHash = manager.GetPasswordHashHMACSHA512(_password, _salt);
                break;
        }

        return passwordHash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>encryptPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts the password
    /// </summary>
    /// <param name = "_password">
    /// Password
    /// </param>
    /// <param name = "_primaryPasswordHash">
    /// The primary password type 
    /// </param>
    /// <returns>
    /// The encrypted password hash
    /// </returns>
    public Sha512Hash encryptPassword(Sha512Hash _password, Sha512Hash _primaryPasswordHash)
    {
        PasswordManager manager;
        Sha512Hash      passwordHash;
        
        manager = new PasswordManager();

        passwordHash = manager.EncryptPasswordAES(_password, _primaryPasswordHash);

        return passwordHash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decryptPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decrypts the password
    /// </summary>
    /// <param name = "_passwordHash">
    /// The password hash
    /// </param>
    /// <param name = "_primaryPasswordHash">
    /// The primary password type
    /// </param>
    /// <returns>
    /// The decrypted password hash
    /// </returns>
    public Sha512Hash decryptPassword(Sha512Hash _passwordHash, Sha512Hash _primaryPasswordHash)
    {
        PasswordManager manager;
        Sha512Hash      passwordHash;
        
        manager = new PasswordManager();

        passwordHash = manager.DecryptPasswordAES(_passwordHash, _primaryPasswordHash);

        return passwordHash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWalletUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>PasswordWalletUser</c> record
    /// </summary>
    /// <param name = "_walletUser">
    /// The <c>PasswordWalletUser</c> record
    /// </param>
    /// <returns>
    /// The <c>PasswordWalletUser</c> record
    /// </returns>
    public PasswordWalletUser parmWalletUser(PasswordWalletUser _walletUser = walletUser)
    {
        walletUser = _walletUser;

        return walletUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the new inctance of <c>PasswordsWalllet</c> class
    /// </summary>
    /// <returns>
    /// The c>PasswordsWalllet</c> class object
    /// </returns>
    public static PasswordsWalllet construct()
    {
        PasswordsWalllet wallet = new PasswordsWalllet();

        return wallet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>