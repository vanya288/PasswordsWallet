<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PasswordsWallletController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Passwords wallet controller class
/// </summary>
class PasswordsWallletController extends SysOperationServiceController
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Main method
    /// </summary>
    /// <param name = "_args">Args</param>
    public static void main(Args _args)
    {
        PasswordsWallletController controller;

        controller = PasswordsWallletController::initFromArgs(_args);

        controller.startOperation();

        controller.refreshCallerWallet(_args.caller());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PasswordsWallletController</c> object 
    /// from the <c>Args</c> object
    /// </summary>
    /// <param name = "_args"><c>Args</c> object</param>
    /// <returns>
    /// The <c>PasswordsWallletController</c> object
    /// </returns>
    public static PasswordsWallletController initFromArgs(Args _args)
    {
        PasswordsWallletController controller;
        PasswordWalletAction       action;
        SysDictEnum                dictEnum;
        Object                     caller;
        PasswordsWallletContract   contract;
        PasswordWalletUser         walletUser;

        if (_args.parmEnumType() == enumNum(PasswordWalletAction))
        {
            action = _args.parmEnum();
        }

        switch (action)
        {
            case PasswordWalletAction::SignUp:
                controller = PasswordsWallletController::constructSignUp();
                break;

            case PasswordWalletAction::SignIn:
                controller = PasswordsWallletController::constructSignIn();
                break;

            case PasswordWalletAction::Change:
                controller = PasswordsWallletController::constructChange();
                break;
        }

        caller   = _args.caller();

        if (controller)
        {
            contract = controller.getDataContractObject();
        }

        if (!action || !controller || !contract || !caller || caller.name() != formStr(PasswordsWallet))
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        walletUser = _args.record();

        dictEnum = new SysDictEnum(enumNum(PasswordWalletAction));

        controller.parmDialogCaption(dictEnum.value2Label(action));
    
        controller.parmArgs(_args);

        if (walletUser.Login)
        {
            contract.parmLogin(walletUser.Login);
        }

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCallerWallet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the caller object
    /// </summary>
    /// <param name = "_caller">
    /// The caller object
    /// </param>
    public void refreshCallerWallet(Object _caller)
    {
        if (formHasMethod(_caller, identifierStr(refreshWallet)))
        {
            _caller.refreshWallet();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructSignUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the controller for sign up operation
    /// </summary>
    /// <returns>
    /// <c>PasswordsWallletController</c> object
    /// </returns>
    public static PasswordsWallletController constructSignUp()
    {
        PasswordsWallletController controller;
    
        controller =
            new PasswordsWallletController(
                classStr(PasswordsWallletSignUpService),
                methodStr(PasswordsWallletSignUpService, run),
                SysOperationExecutionMode::Synchronous);
    
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructSignIn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the controller for sign in operation
    /// </summary>
    /// <returns>
    /// <c>PasswordsWallletController</c> object
    /// </returns>
    public static PasswordsWallletController constructSignIn()
    {
        PasswordsWallletController controller;
    
        controller =
            new PasswordsWallletController(
                classStr(PasswordsWallletSignInService),
                methodStr(PasswordsWallletSignInService, run),
                SysOperationExecutionMode::Synchronous);
    
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the controller for password change operation
    /// </summary>
    /// <returns>
    /// <c>PasswordsWallletController</c> object
    /// </returns>
    public static PasswordsWallletController constructChange()
    {
        PasswordsWallletController controller;
    
        controller =
            new PasswordsWallletController(
                classStr(PasswordsWallletChangeService),
                methodStr(PasswordsWallletChangeService, run),
                SysOperationExecutionMode::Synchronous);
    
        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>